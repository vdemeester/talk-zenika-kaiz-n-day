#+TITLE: Docker
#+SUBTITLE: What\'s next !
#+DATE: 2015/10/08
#+AUTHOR: vdemeester & mariolet
#+EMAIL: vincent.demeester@zenika.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 24.4.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: fr
#+SELECT_TAGS: export

#+COMPANY: Zenika
#+WWW: http://zenika.com/
#+TWITTER: vdemeest

#+FAVICON: images/docker_icon_trans.png
#+ICON: images/docker_icon_trans.png
#+HASHTAG: #kaiz-n-day #zenika

** /Who

   #+BEGIN_HTML
<span style="text-align: right;float:right; display: block; width: 50%;">Docker maintainer<br/>certified trainer<br><span style="font-size: 2em;">üê≥</span></span>
   #+END_HTML

   #+NAME:   fig:me-contribs-fun
   [[./images/me-contribs-fun.png]]


   - I'm a developer, devops, craftsman, factotum ‚Äî /I üíì & work @Zenika/
   - I üíì GNU/Linux, Docker & GNU/Emacs
   - I üíì Free-software !
   - I üíì *Java*, *Go*, Python and much more
   - And I üíì unicode, üö¥ & üö∂

#+BEGIN_CENTER
üê∏
#+END_CENTER

* Plan

  - Pr√©sentation rapide de Docker
  - √âcosyst√®me Docker
  - Dive into plugins : volumes, network
  - Notary & content trust
  - Open container foundation & runC
  - Docker Services (hub, projet orca, ‚Ä¶)
  - Windows port

#+BEGIN_CENTER
*üò∏ D√©mo all the thing üò∏*
#+END_CENTER

* Docker
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
  Pr√©sentation ¬´ express ¬ª
** Quelques chiffres

   #+ATTR_HTML: :class build
- *Quelques dates* :
  - **mars 2013 :** dotCloud rend disponible Docker en Open Source
  - **octobre 2013 :** DotCloud devient Docker Inc.
  - **d√©cembre 2013:** Google Compute Engine supporte Docker
  - **avril 2014:** Amazon Web Service supporte Docker
  - **octobre 2014:** Partnership avec Microsoft

  #+ATTR_HTML: :class build
- *Quelques chiffres* :
  - 150+ Docker Meetup dans 50 pays
  - 25,000+ Github stars
  - 200M+ Docker Engine downloads
  - 1000+ d√©veloppeurs de la communaut√© ont contribu√©

** D√©finitions
:PROPERTIES:
:ARTICLE:  larger
:END:

#+BEGIN_QUOTE
"Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications."

    -- docker.com
#+END_QUOTE

#+BEGIN_QUOTE
"Docker is an open-source project that automates the deployment of applications inside software containers"

    -- wikipedia.org
#+END_QUOTE

** M√©taphore
:PROPERTIES:
:FILL:     images/goldengate-containers.jpg
:TITLE:    white
:SLIDE:    white
:ARTICLE:  large
:END:

Le transport de conteneurs

** Architecture

#+BEGIN_QUOTE
Standing on the shoulders of giants
#+END_QUOTE

#+ATTR_HTML: :width 550px :style float: right;
[[file:images/vm-vs-docker.png]]

#+ATTR_HTML: :width 400px
[[file:images/docker-isolation-small.png]]

Quick note : /Repeat after me/ *Containers ARE NOT VMs !*

** Principales notions

#+ATTR_HTML: :width 400px :style float: right;
[[file:images/docker-filesystems-multilayer-small.png]]

- Registry (/Distribution/)
  - D√©pot d'images
- Images (/Construction/)
  - Template
  - Lecture seule
- Conteneurs (/Runtime/) :
  - Bas√© sur une image
  - Dispose d'un √©tat

** Show the code üò∏

#+BEGIN_SRC sh
# Run an image‚Ä¶
$ docker run -ti --rm ubuntu:14.04 /bin/bash
# ‚Ä¶ or something more useful
$ docker run -d -p 8080:8080 -p 80:8000 \
         -v $PWD/traefik.toml:/traefik.toml \
         emilevauge/traefik
# ‚Ä¶ or totaly crazy
$ docker run -d -v /tmp/.X11-unix:/tmp/.X11 \
             -e DISPLAY=unix$DISPLAY \
             # ‚Ä¶
             --name spotify vdemeester/spotify
# What is running ?
$ docker ps
#+END_SRC

#+BEGIN_CENTER
*D√©mo üôÜ*
#+END_CENTER


* √âcosyst√®me
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
  Infos & Updates

** Ecosystem


#+ATTR_HTML: :width 500px :style float: right;
[[file:images/animals-august2015.png]]

- Docker Inc.
  - Compose / Libcompose
  - Swarm
  - Machine / Libmachine
  - Notary
  - Libnetwork
- Ailleurs
  - Kubernetes (Google)
  - Rancher (Rancher)
  - Flocker (ClusterHQ)
  - ‚Ä¶

** Compose

#+ATTR_HTML: :style float: right;
[[file:images/logo_compose.png]]


#+BEGIN_QUOTE
Compose is a tool for defining and running multi-container
applications with Docker. With Compose, you define a multi-container
application in a single file, then spin your application up in a
single command which does everything that needs to be done to get it
running.

*Compose is great for development environments, staging servers, and CI.*

    -- docs.docker.com
#+END_QUOTE

- *Compose*
  - √âcrit en python
- *Libcompose* est un port de Compose en Go et pour un usage ¬´ librairie ¬ª

** Compose üò∏

#+BEGIN_SRC yaml
web:
    <b>build: .</b>
    command: python app.py
    links:
    - db
    ports:
    - "8000:8000"
db:
    <b>image: postgres</b>
    environment:
    - LANG=C
#+END_SRC

D√©marrer la ¬´ stack ¬ª

#+BEGIN_SRC sh
$ docker-compose up
#+END_SRC

** Machine üò∏

#+ATTR_HTML: :width 200px :style float: right;
[[file:images/logo_machine.png]]

#+BEGIN_QUOTE
Machine lets you create Docker hosts on your computer, on cloud
providers, and inside your own data center. It creates servers,
installs Docker on them, then configures the Docker client to talk to
them.

    -- docs.docker.com
#+END_QUOTE

- Providers : cloud (aws, azure, ‚Ä¶), local (vmware, virtualbox), generic
- Provisionning : current, experimental, ‚Ä¶

#+BEGIN_SRC sh
$ docker-machine create -d virtualbox \
                 demo
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
demo : provision machine (aws ?) with swarm and run something on it
#+END_QUOTE

** Swarm üò∏

#+ATTR_HTML: :width 200px :style float: right;
[[file:images/logo_swarm.png]]

#+BEGIN_QUOTE
Docker Swarm is *native clustering* for Docker. It turns a pool of Docker hosts into a single, virtual host.

*Swarm serves the standard Docker API*, so any tool which already
communicates with a Docker daemon can use Swarm to transparently scale
to multiple hosts: Dokku, Compose, Krane, Flynn, Deis, DockerUI,
Shipyard, Drone, Jenkins... and, of course, the Docker client itself.

    -- docs.docker.com
#+END_QUOTE

#+BEGIN_SRC sh
# Manager
$ docker run swarm -H tcp://<swarm_ip:swarm_port> consul://<consul_addr>/<path>
# Nodes
$ docker run swarm join --advertise=<nodeip:2375> consul://<consul_addr>/<path>
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
demo : setup consul and demo using it
#+END_QUOTE
* Docker plugins
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:


** Extensions, extensions !

- *Network plugins*, which allow third-party container networking
  solutions to connect containers to container networks, making it
  easier for containers to talk to each other even if they are running
  on different machines.
- *Volume plugins*, which allow third-party container data management
  solutions to provide data volumes for containers which operate on
  data, such as databases, queues and key-value stores and other
  stateful applications that use the filesystem.
- More to come =\o/=

** Volume plugins üò∏

- HTTP API : [[https://github.com/docker/docker/blob/master/docs/extend/plugins_volume.md][docker/docker doc]]
  - [[https://github.com/calavera/dkvolume][dkvolume]] pour cr√©er des plugins en Go(lang)
  - Projets √† venir pour d'autres langages
- Examples
  - [[https://github.com/cpuguy83/docker-kvfs-driver][kvfs]] : key-value filesystem @calavera
  - [[https://github.com/rancher/convoy][convoy]] üò∏ : plusieurs backend, snapshot/backup/restore support @rancher

#+BEGIN_SRC sh
$ docker volume create --driver convoy --name myconvoy
$ docker run -ti --rm -v myconvoy:/vol1 ubuntu touch /vol1/hello
$ docker run -ti --rm -v myconvoy:/vol1 ubuntu ls /vol1
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
demo : choose a volume plugin and demo it (convoy, kv one @calavera) 
- https://github.com/cpuguy83/docker-kvfs-driver
- https://github.com/rancher/convoy
demo : simple volume plugin ?
#+END_QUOTE

** Network plugins

#+BEGIN_QUOTE
The goal of libnetwork is to deliver a robust Container Network Model
that provides a consistent programming interface and the required
network abstractions for applications.
#+END_QUOTE

- Plugins network
  - Built-in : overlay, ‚Ä¶
  - Channel experimental
- Examples
  - [[https://github.com/weaveworks/docker-plugin][weave]]
  - [[https://docs.clusterhq.com/en/1.4.0/labs/docker-plugin.html][flocker]]

** Weave + Flocker üò∏

#+BEGIN_CENTER
#+ATTR_HTML: :height 500px;
[[file:images/docker-plugin-platform-architecture.png]]
#+END_CENTER


* Notary
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

Trust me !

** Notary

#+BEGIN_QUOTE
The Notary project comprises a server and a client for running and
interacting with trusted collections.

Notary aims to *make the internet more secure by making it easy for
people to publish and verify content*. We often rely on TLS to secure
our communications with a web server which is inherently flawed, as
any compromise of the server enables malicious content to be
substituted for the legitimate content.

    -- github.com/docker/notary
#+END_QUOTE


- Buts: Survivable Key Compromise, Freshness Guarantees, Configurable
  Trust Thresholds, Signing Delegation, Use of Existing Distribution,
  Untrusted Mirrors and Transport.
- Bas√© sur [[http://theupdateframework.com/][The Update Framework]], architecture client/serveur.
- Ind√©pendant de =docker=, int√©gr√© √† la version 1.8.

** Integration with docker üò∏

- Int√©gr√© sous le nom de [[http://docs.docker.com/security/trust/content_trust/][Docker Content Trust]].

#+BEGIN_QUOTE
Content trust gives you the ability to both verify the integrity and
the publisher of all the data received from a registry over any
channel.
#+END_QUOTE

#+BEGIN_SRC sh
$ export DOCKER_CONTENT_TRUST=1 # enable trust
$ export DOCKER_CONTENT_TRUST_SERVER=https://notaryserver:4443
$ docker pull sandboxregistry:5000/test/trusttest
$ docker push sandboxregistry:5000/test/trusttest:latest
# [‚Ä¶]
latest: digest: sha256:1d871dcb16805f0604f10d31260e79c # [‚Ä¶]
Signing and pushing trust metadata
# [‚Ä¶]
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
demo : trust me something
#+END_QUOTE

* OCF & runc
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

Standards

** Open Container Foundation

#+BEGIN_QUOTE
The Open Container Initiative is a lightweight, open governance
structure, to be formed under the auspices of the Linux Foundation,
for the express purpose of creating open industry standards around
container formats and runtime.
#+END_QUOTE

- Rassurer l'√©cosyst√®me sur la ¬´ main-mise ¬ª de Docker Inc. sur le
  /moteur/ de conteneurisation
- Fondation pilot√© par la Linux Foundation
- [[https://github.com/opencontainers/specs][Specifications]] et [[https://github.com/opencontainers/runc][Impl√©mentation (runc)]]
  - int√©grer docker 1.9 ou apr√®s (1.10)
  - remplace les /exec driver/


** runc üò∏

- Configuration json : =config.json=, =runtime.json=

#+BEGIN_SRC sh
runc start
/ $ ps
PID   USER     COMMAND
1     daemon   sh
5     daemon   sh
/ $
#+END_SRC

- Possible d'utiliser une image docker

#+BEGIN_SRC sh
$ docker export $(docker create busybox) > busybox.tar
$ mkdir rootfs && tar -C rootfs -xf busybox.tar
$ runc spec
$ runc start
#+END_SRC

* Services
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Nouveau Docker Hub üò∏

Public image registry

#+BEGIN_CENTER
#+ATTR_HTML: :width 80%
[[file:images/hub.docker.com.png]]
#+END_CENTER

** Docker Trusted Registry üò∏

#+ATTR_HTML: :width 65% :style float: right;
[[file:images/dtr.png]]

- Entreprise/private image registry
- Storage backends (S3, ceph, ‚Ä¶)
- Advanced Auth.
- Commercial support

* Windows
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Preview üò∏

#+BEGIN_CENTER
#+ATTR_HTML: :height 400px;
[[file:images/frazelle_notepad.png]]
#+END_CENTER


* Thank You üê∏

:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:


* Footnotes

[fn:1] Footnote is in here!

demo-plugin 2015 (weave/flocker)
azure 
